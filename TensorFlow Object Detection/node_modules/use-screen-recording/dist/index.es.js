import { useState } from 'react';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(n);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var defaultDisplayMediaOptions = {
  audio: false,
  video: {
    cursor: "always"
  }
};
function useScreenRecording() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$displayMediaOpti = _ref.displayMediaOptions,
      displayMediaOptions = _ref$displayMediaOpti === void 0 ? defaultDisplayMediaOptions : _ref$displayMediaOpti,
      _ref$onEnd = _ref.onEnd,
      onEnd = _ref$onEnd === void 0 ? function () {} : _ref$onEnd,
      _ref$onError = _ref.onError,
      onError = _ref$onError === void 0 ? function () {} : _ref$onError,
      _ref$onStart = _ref.onStart,
      onStart = _ref$onStart === void 0 ? function () {} : _ref$onStart;

  var _React$useState = useState(null),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      captureStream = _React$useState2[0],
      setCaptureStream = _React$useState2[1];

  var _React$useState3 = useState(null),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      error = _React$useState4[0],
      setError = _React$useState4[1];

  var _React$useState5 = useState(null),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      mediaRecorder = _React$useState6[0],
      setMediaRecorder = _React$useState6[1];

  var _React$useState7 = useState(false),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      isRecording = _React$useState8[0],
      setIsRecording = _React$useState8[1];

  var _React$useState9 = useState(null),
      _React$useState10 = _slicedToArray(_React$useState9, 2),
      recording = _React$useState10[0],
      setRecording = _React$useState10[1];

  var stopRecording = function stopRecording() {
    try {
      setIsRecording(false);
      mediaRecorder.stop();
      captureStream.getTracks().forEach(function (track) {
        return track.stop();
      });
    } catch (e) {
      onError(e);
      setError(e);
    }
  };

  var startRecording = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var stream, recorder;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return navigator.mediaDevices.getDisplayMedia(displayMediaOptions);

            case 3:
              stream = _context.sent;
              setIsRecording(true);
              stream.getTracks().forEach(function (track) {
                track.onended = stopRecording;
              });
              setCaptureStream(stream);
              recorder = new MediaRecorder(stream);

              recorder.ondataavailable = function (event) {
                onEnd(event);
                setRecording(event.data);
              };

              recorder.start();
              setMediaRecorder(recorder);
              onStart({
                stream: stream,
                recorder: recorder
              });
              _context.next = 19;
              break;

            case 14:
              _context.prev = 14;
              _context.t0 = _context["catch"](0);
              setIsRecording(false);
              onError(_context.t0);
              setError(_context.t0);

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 14]]);
    }));

    return function startRecording() {
      return _ref2.apply(this, arguments);
    };
  }();

  var toggleRecording = function toggleRecording() {
    return isRecording ? stopRecording() : startRecording();
  };

  return {
    captureStream: captureStream,
    error: error,
    isRecording: isRecording,
    mediaRecorder: mediaRecorder,
    recording: recording,
    startRecording: startRecording,
    stopRecording: stopRecording,
    toggleRecording: toggleRecording
  };
}

export default useScreenRecording;
//# sourceMappingURL=index.es.js.map
