{"version":3,"sources":["index.tsx"],"names":["RecordScreen","NativeModules","RS","ReactNativeRecordScreenClass","Dimensions","get","width","height","setup","config","conf","Object","assign","mic","_screenWidth","_screenHeight","startRecording","Promise","resolve","reject","then","catch","stopRecording","clean","ReactNativeRecordScreen"],"mappings":";;;;;;;AAAA;;;;AAiCA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,0BAAzB;AAEA,MAAMC,EAAE,GAAGF,YAAX;;AAEA,MAAMG,4BAAN,CAAmC;AAAA;AAAA,0CACVC,wBAAWC,GAAX,CAAe,QAAf,EAAyBC,KADf;;AAAA,2CAETF,wBAAWC,GAAX,CAAe,QAAf,EAAyBE,MAFhB;AAAA;;AAIjCC,EAAAA,KAAK,CAACC,MAA8B,GAAG,EAAlC,EAA4C;AAC/C,UAAMC,IAAI,GAAGC,MAAM,CAACC,MAAP,CACX;AACEC,MAAAA,GAAG,EAAE,IADP;AAEEP,MAAAA,KAAK,EAAE,KAAKQ,YAFd;AAGEP,MAAAA,MAAM,EAAE,KAAKQ;AAHf,KADW,EAMXN,MANW,CAAb;AAQAP,IAAAA,EAAE,CAACM,KAAH,CAASE,IAAT;AACD;;AAED,QAAMM,cAAN,CACEP,MAA8B,GAAG,EADnC,EAEmC;AACjC,SAAKD,KAAL,CAAWC,MAAX;AACA,WAAO,IAAIQ,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCjB,MAAAA,EAAE,CAACc,cAAH,GAAoBI,IAApB,CAAyBF,OAAzB,EAAkCG,KAAlC,CAAwCF,MAAxC;AACD,KAFM,CAAP;AAGD;;AAEDG,EAAAA,aAAa,GAA+B;AAC1C,WAAO,IAAIL,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCjB,MAAAA,EAAE,CAACoB,aAAH,GAAmBF,IAAnB,CAAwBF,OAAxB,EAAiCG,KAAjC,CAAuCF,MAAvC;AACD,KAFM,CAAP;AAGD;;AAEDI,EAAAA,KAAK,GAAoB;AACvB,WAAO,IAAIN,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCjB,MAAAA,EAAE,CAACqB,KAAH,GAAWH,IAAX,CAAgBF,OAAhB,EAAyBG,KAAzB,CAA+BF,MAA/B;AACD,KAFM,CAAP;AAGD;;AAnCgC;;AAsCnC,MAAMK,uBAAuB,GAAG,IAAIrB,4BAAJ,EAAhC;eAEeqB,uB","sourcesContent":["import { NativeModules, Dimensions } from 'react-native';\n\nexport type RecordingStartResponse = 'started';\n\nexport type RecordScreenConfigType = {\n  mic?: boolean;\n};\n\nexport type RecordingSuccessResponse = {\n  status: 'success';\n  result: {\n    outputURL: string;\n  };\n};\n\nexport type RecordingErrorResponse = {\n  status: 'error';\n  result: any;\n};\n\nexport type RecordingResponse =\n  | RecordingSuccessResponse\n  | RecordingErrorResponse;\n\ntype RecordScreenType = {\n  setup(config: RecordScreenConfigType): void;\n  startRecording(\n    config?: RecordScreenConfigType\n  ): Promise<RecordingStartResponse>;\n  stopRecording(): Promise<RecordingResponse>;\n  clean(): Promise<string>;\n};\n\nconst { RecordScreen } = NativeModules;\n\nconst RS = RecordScreen as RecordScreenType;\n\nclass ReactNativeRecordScreenClass {\n  private _screenWidth = Dimensions.get('window').width;\n  private _screenHeight = Dimensions.get('window').height;\n\n  setup(config: RecordScreenConfigType = {}): void {\n    const conf = Object.assign(\n      {\n        mic: true,\n        width: this._screenWidth,\n        height: this._screenHeight,\n      },\n      config\n    );\n    RS.setup(conf);\n  }\n\n  async startRecording(\n    config: RecordScreenConfigType = {}\n  ): Promise<RecordingStartResponse> {\n    this.setup(config);\n    return new Promise((resolve, reject) => {\n      RS.startRecording().then(resolve).catch(reject);\n    });\n  }\n\n  stopRecording(): Promise<RecordingResponse> {\n    return new Promise((resolve, reject) => {\n      RS.stopRecording().then(resolve).catch(reject);\n    });\n  }\n\n  clean(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      RS.clean().then(resolve).catch(reject);\n    });\n  }\n}\n\nconst ReactNativeRecordScreen = new ReactNativeRecordScreenClass();\n\nexport default ReactNativeRecordScreen;\n"]}